name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run tests weekly to catch dependency issues
    - cron: '0 8 * * 1'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and lint the code
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest black mypy
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/python/agent.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/python/agent.py --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
        
    - name: Format check with black
      run: |
        black --check --diff src/python/agent.py
        
    - name: Type check with mypy
      run: |
        mypy src/python/agent.py --ignore-missing-imports
        
    - name: Run tests
      run: |
        python test_agent.py
        
    - name: Test Docker build
      run: |
        docker build -t test-image .

  # Build and push multi-architecture Docker images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Build Home Assistant addon
  home-assistant-addon:
    name: Build HA Addon
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        arch: ["aarch64", "amd64", "armhf", "armv7", "i386"]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get information
      id: info
      uses: home-assistant/actions/helpers/info@master
      
    - name: Check if addon changed
      id: changed
      run: |
        if [[ "${{ steps.info.outputs.changed }}" =~ .*"config.json".* ]]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Login to GitHub Container Registry
      if: steps.changed.outputs.changed == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build addon
      if: steps.changed.outputs.changed == 'true'
      uses: home-assistant/builder@master
      with:
        args: |
          --target .
          --${{ matrix.arch }}
          --docker-hub ghcr.io/${{ github.repository_owner }}
          --addon

  # Publish to Home Assistant addon repository
  publish-addon:
    name: Publish HA Addon
    runs-on: ubuntu-latest
    needs: [test, home-assistant-addon]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Checkout addon repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/hassio-addons
        token: ${{ secrets.ADDON_REPO_TOKEN }}
        path: ./addon-repo
        
    - name: Update addon version and copy files
      run: |
        # Extract version from tag or use commit SHA
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(echo ${{ github.sha }} | cut -c1-7)
        fi
        
        # Create addon directory if it doesn't exist
        mkdir -p ./addon-repo/solarmax-mqtt
        
        # Copy addon files
        cp config.json ./addon-repo/solarmax-mqtt/
        cp Dockerfile.hassio ./addon-repo/solarmax-mqtt/Dockerfile
        cp run.sh ./addon-repo/solarmax-mqtt/
        cp README_ADDON.md ./addon-repo/solarmax-mqtt/README.md
        cp -r src ./addon-repo/solarmax-mqtt/
        cp requirements.txt ./addon-repo/solarmax-mqtt/
        
        # Update version in config.json
        sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/" ./addon-repo/solarmax-mqtt/config.json
        
    - name: Commit and push changes
      run: |
        cd ./addon-repo
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git diff --staged --quiet || git commit -m "Update Solarmax MQTT addon to ${{ github.sha }}"
        git push

  # Create GitHub release on tag
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [docker, home-assistant-addon]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate changelog
      id: changelog
      run: |
        # Generate a simple changelog from commit messages since last tag
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          echo "## Changes since $PREV_TAG" > CHANGELOG.md
          git log --oneline $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "First release of Solarmax to MQTT Agent" >> CHANGELOG.md
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'